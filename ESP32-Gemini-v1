#include <AlfredoCRSF.h>
#include <HardwareSerial.h>
#include <SoftwareSerial.h>

#define PIN_RX_IN1 18
#define PIN_TX_IN1 19

#define PIN_RX_IN2 16
#define PIN_TX_IN2 17

//#define PIN_RX_OUT 10
//#define PIN_TX_OUT 9

// Set up a new Serial object
HardwareSerial crsfSerialIn1(1);
AlfredoCRSF crsfIn1;

HardwareSerial crsfSerialIn2(2);
AlfredoCRSF crsfIn2;

//HardwareSerial crsfSerialOut(2);
//AlfredoCRSF crsfOut;

void setup() {
  Serial.begin(115200);
  crsfSerialIn1.begin(CRSF_BAUDRATE, SERIAL_8N1, PIN_RX_IN1, PIN_TX_IN1);
  delay(1000);
  crsfSerialIn2.begin(CRSF_BAUDRATE, SERIAL_8N1, PIN_RX_IN2, PIN_TX_IN2);
  delay(1000);
  //crsfSerialOut.begin(CRSF_BAUDRATE, SERIAL_8N1, PIN_RX_OUT, PIN_TX_OUT);
  if (!crsfSerialIn1)
    while (1) Serial.println("Invalid crsfSerial-IN-1 configuration");
  if (!crsfSerialIn2)
    while (1) Serial.println("Invalid crsfSerial-IN-2 configuration");
  //if (!crsfSerialOut) while (1) Serial.println("Invalid crsfSerial-OUT configuration");
  crsfIn1.begin(crsfSerialIn1);
  crsfIn2.begin(crsfSerialIn2);
  //crsfOut.begin(crsfSerialOut);
}

void loop() {
  crsfIn1.update();
  crsfIn2.update();
  //crsfOut.update();
  if (!crsfSerialIn1)
    while (1) Serial.println("No link to TX 1");
  if (!crsfSerialIn2)
    while (1) Serial.println("No link to TX 2");
  printChannels(crsfIn1, crsfIn2);
  //sendChannels(crsfIn, crsfOut);
}

void sendChannels(AlfredoCRSF crsf_in, AlfredoCRSF crsf_out) {
  crsf_channels_t crsfChannelz = { 0 };
  crsfChannelz.ch0 = crsf_in.getChannel(1);
  crsfChannelz.ch1 = crsf_in.getChannel(2);
  crsfChannelz.ch2 = crsf_in.getChannel(3);
  crsfChannelz.ch3 = crsf_in.getChannel(4);
  crsfChannelz.ch4 = crsf_in.getChannel(5);
  crsfChannelz.ch5 = crsf_in.getChannel(6);
  crsfChannelz.ch6 = crsf_in.getChannel(7);
  crsfChannelz.ch7 = crsf_in.getChannel(8);
  crsfChannelz.ch8 = crsf_in.getChannel(9);
  crsfChannelz.ch9 = crsf_in.getChannel(10);
  crsfChannelz.ch10 = crsf_in.getChannel(11);
  crsfChannelz.ch11 = crsf_in.getChannel(12);
  crsfChannelz.ch12 = crsf_in.getChannel(13);
  crsfChannelz.ch13 = crsf_in.getChannel(14);
  crsfChannelz.ch14 = crsf_in.getChannel(15);
  crsfChannelz.ch15 = crsf_in.getChannel(16);
  //Enqueue
  crsf_out.queuePacket(CRSF_SYNC_BYTE, CRSF_FRAMETYPE_RC_CHANNELS_PACKED, &crsfChannelz, sizeof(crsfChannelz));
}

void printChannels(AlfredoCRSF crsf1, AlfredoCRSF crsf2) {
  if (crsf1.isLinkUp()) {
    // First RX likked. Reading data
    for (int ChannelNum = 1; ChannelNum <= 16; ChannelNum++) {
      Serial.print(crsf1.getChannel(ChannelNum));
      Serial.print(", ");
    }
  }
  Serial.print(" ||| ");
  if (crsf2.isLinkUp()) {
    // First RX likked. Reading data
    for (int ChannelNum = 1; ChannelNum <= 16; ChannelNum++) {
      Serial.print(crsf2.getChannel(ChannelNum));
      Serial.print(", ");
    }
  }
  Serial.print(" ||| Link1: ");
  Serial.print(crsf1.isLinkUp());
  Serial.print(" ||| Link2: ");
  Serial.print(crsf2.isLinkUp());
  Serial.println(" ");
}
